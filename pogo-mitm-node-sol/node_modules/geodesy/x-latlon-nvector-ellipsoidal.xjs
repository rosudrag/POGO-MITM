/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/* Vector-based ellipsoidal geodetic (latitude/longitude) functions   (c) Chris Veness 2015-2016  */
/*                                                                                   MIT Licence  */
/* www.movable-type.co.uk/scripts/latlong-vectors.html                                            */
/* www.movable-type.co.uk/scripts/geodesy/docs/module-latlon-nvector-spherical.html               */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

'use strict';
if (typeof module!='undefined' && module.exports) var LatLon = require('./latlon-ellipsoidal.js'); // ≡ import LatLon from 'latlon-ellipsoidal.js'
if (typeof module!='undefined' && module.exports) var Vector3d = require('./vector3d.js');         // ≡ import Vector3d from 'vector3d.js'
if (typeof module!='undefined' && module.exports) var Dms = require('./dms.js');                   // ≡ import Dms from 'dms.js'


/**
 * Tools for working with points on (ellipsoidal models of) the earth’s surface using a vector-based
 * approach using ‘n-vectors’ (rather than the more common spherical trigonometry) principally
 * methods for calculating delta vectors between points.
 *
 * Based on Kenneth Gade's 'Non-singular Horizontal Position Representation'
 *
 * @module   latlon-nvector-ellipsoidal
 * @requires vector3d
 * @requires dms
 */


/**
 * Converts ‘this’ lat/lon point to Nvector (normal to earth's surface).
 *
 * @private
 * @returns {Nvector} Normalised n-vector representing lat/lon point.
 *
 * @example
 *   var p = new LatLon(45, 45);
 *   var v = p.toNvector(); // v.toString(): [0.500,0.500,0.707]
 */
LatLon.prototype.toNvector = function() {
    var φ = this.lat.toRadians();
    var λ = this.lon.toRadians();

    // right-handed vector: x -> 0°E,0°N; y -> 90°E,0°N, z -> 90°N
    var x = Math.cos(φ) * Math.cos(λ);
    var y = Math.cos(φ) * Math.sin(λ);
    var z = Math.sin(φ);

    return new Nvector(x, y, z);
};


/**
 * Checks if another point is equal to ‘this’ point.
 *
 * @private
 * @param   {LatLon} point - Point to be compared against this point.
 * @returns {bool}   True if points are identical.
 *
 * @example
 *   var p1 = new LatLon(52.205, 0.119), p2 = new LatLon(52.205, 0.119);
 *   var equal = p1.equals(p2); // equal: true
 */
LatLon.prototype.equals = function(point) {
    if (!(point instanceof LatLon)) throw new TypeError('point is not LatLon object');

    if (this.lat != point.lat) return false;
    if (this.lon != point.lon) return false;
    if (this.height != point.height) return false;
    if (this.datum != point.datum) return false;

    return true;
};


/**
 * Returns a string representation of ‘this’ point.
 *
 * @param   {string} [format=dms] - Format point as 'd', 'dm', 'dms'.
 * @param   {number} [dp=0|2|4] - Number of decimal places to use: default 0 for dms, 2 for dm, 4 for d.
 * @returns {string} Comma-separated formatted latitude/longitude.
 */
LatLon.prototype.toString = function(format, dp) {
    if (format === undefined) format = 'dms';

    return Dms.toLat(this.lat, format, dp) + ', ' + Dms.toLon(this.lon, format, dp);
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


/**
 * An n-vector is a vector normal to the Earth ellipsoid (a non-singular position representation).
 *
 * For many applications, n-vectors are more convenient to work with than other position
 * representations such as latitude/longitude, UTM coordinates, etc.
 *
 * On a spherical model earth, an n-vector is equivalent to an earth-centred earth-fixed (ECEF)
 * vector.
 *
 * @module   nvector
 * @requires latlon-spherical
 * @requires latlon-vector3d
 */


// JavaScript ES5 magic ≡ class Nvector extends Vector3d
Nvector.prototype = Object.create(Vector3d.prototype);
Nvector.prototype.constructor = Nvector;
// developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create


/**
 * TODO Creates ...
 *
 * @constructor
 * @param {number} x - x component.
 * @param {number} y - y component.
 * @param {number} z - z component.
 * @param {number} [h=0] - height above ellipsoid surface in metres.
 *
 * @example
 *     var p1 = new Nvector(0.707, 0.707, 0.707, 1);
 */
function Nvector(x, y, z, h) {
    // allow instantiation without 'new'
    if (!(this instanceof Nvector)) return new Nvector(x, y, z, h);

    if (h === undefined) h = 0;

    Vector3d.call(this); // call super constructor

    this.x = Number(x);
    this.y = Number(y);
    this.z = Number(z);
    this.h = Number(h);
}


/**
 * Converts ‘this’ n-vector to latitude/longitude point.
 *
 * @returns  {LatLon} Latitude/longitude point vector points to.
 *
 * @example
 *   var v = new Vector3d(0.500, 0.500, 0.707);
 *   var p = v.toLatLon(); // p.toString(): 45.0°N, 45.0°E
 */
Nvector.prototype.toLatLon = function() {
    var φ = Math.atan2(this.z, Math.sqrt(this.x*this.x + this.y*this.y));
    var λ = Math.atan2(this.y, this.x);

    return new LatLon(φ.toDegrees(), λ.toDegrees());
};


/**
 * Returns a string representation of ‘this’ n-vector.
 *
 * @param   {number} [dp=0|2|4] - Number of decimal places to use - default 0 for dms, 2 for dm, 4 for d.
 * @returns {string} Comma-separated latitude/longitude.
 */
Nvector.prototype.toString = function(dp) {
    if (dp == undefined) dp = 3; // default 0 decimals
    dp = Number(dp);

    return '[' + this.x.toFixed(dp) + ',' + this.y.toFixed(dp) + ',' + this.z.toFixed(dp) + ',' + this.h.toFixed(dp) + ']';
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */


/** Extend Number object with method to convert numeric degrees to radians */
if (Number.prototype.toRadians === undefined) {
    Number.prototype.toRadians = function() { return this * Math.PI / 180; };
}

/** Extend Number object with method to convert radians to numeric (signed) degrees */
if (Number.prototype.toDegrees === undefined) {
    Number.prototype.toDegrees = function() { return this * 180 / Math.PI; };
}

/** Polyfill Math.sign for old browsers / IE */
if (Math.sign === undefined) {
    Math.sign = function(x) {
        x = +x; // convert to a number
        if (x === 0 || isNaN(x)) return x;
        return x > 0 ? 1 : -1;
    };
}


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
if (typeof module != 'undefined' && module.exports) module.exports = LatLon, module.exports.Nvector = Nvector; // ≡ export { LatLon as default, Nvector };
