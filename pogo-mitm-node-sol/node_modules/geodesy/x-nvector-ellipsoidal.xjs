/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
/* nVectors                                                                (c) Chris Veness 2016  */
/*                                                                                   MIT Licence  */
/* www.movable-type.co.uk/scripts/latlon-vectors.html                                             */
/* www.movable-type.co.uk/scripts/geodesy/docs/module-nvectors.html                               */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

'use strict';
if (typeof module!='undefined' && module.exports) var LatLon = require('./latlon-ellipsoidal.js'); // ≡ import LatLonE from 'latlon-ellipsoidal.js'
if (typeof module!='undefined' && module.exports) var Vector3d = require('./vector3d.js');         // ≡ import Vector3d from 'vector3d.js'


/**
 * An n-vector is a vector normal to the Earth ellipsoid (a non-singular position representation).
 *
 * For many applications, n-vectors are more convenient to work with than other position
 * representations such as latitude/longitude, earth-centred earth-fixed (ECEF) vectors, UTM
 * coordinates, etc.
 *
 * @module   nvector
 * @requires latlon-ellipsoidal
 * @requires latlon-vector3d
 */


/**
 * Creates ...
 *
 * @constructor
 * @param {number} x - x component.
 * @param {number} y - y component.
 * @param {number} z - z component.
 * @param {number} [h=0] - height above ellipsoid surface in metres.
 *
 * @example
 *     var p1 = new Nvector(0.707, 0.707, 0.707, 1);
 */
function Nvector(x, y, z, h) {
    // allow instantiation without 'new'
    if (!(this instanceof Nvector)) return new Nvector(x, y, z, h);

    if (h === undefined) h = 0;

    this.x = Number(x);
    this.y = Number(y);
    this.z = Number(z);
    this.h = Number(h);
}


/**
 * Converts ‘this’ n-vector to latitude/longitude point.
 *
 * @param   {LatLon.datum} [datum=WGS84] - Datum this point is defined within.
 * @returns {LatLon} Latitude/longitude point vector points to.
 *
 * @example
 *   var v = new Vector3d(0.500, 0.500, 0.707);
 *   var p = v.toLatLon(); // p.toString(): 45.0°N, 45.0°E
 */
Nvector.prototype.toLatLon = function(datum) {
    var φ = Math.atan2(this.z, Math.sqrt(this.x*this.x + this.y*this.y));
    var λ = Math.atan2(this.y, this.x);

    return new LatLon(φ.toDegrees(), λ.toDegrees(), datum);
};


/**
 * Returns a string representation of ‘this’ n-vector.
 *
 * @param   {number} [dp=0|2|4] - Number of decimal places to use - default 0 for dms, 2 for dm, 4 for d.
 * @returns {string} Comma-separated latitude/longitude.
 */
Nvector.prototype.toString = function(dp) {
    if (dp == undefined) dp = 0; // default 0 decimals
    dp = Number(dp);

    return '['+this.x.toFixed(dp)+','+this.y.toFixed(dp)+','+this.z.toFixed(dp)+','+']';
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */

/** Extend Number object with method to convert numeric degrees to radians */
if (Number.prototype.toRadians === undefined) {
    Number.prototype.toRadians = function() { return this * Math.PI / 180; };
}

/** Extend Number object with method to convert radians to numeric (signed) degrees */
if (Number.prototype.toDegrees === undefined) {
    Number.prototype.toDegrees = function() { return this * 180 / Math.PI; };
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
if (typeof module != 'undefined' && module.exports) module.exports = Nvector; // ≡ export default Nvector
